== == == == == == == == == == == == == =
How to use 3 - say_my_name.py
== == == == == == == == == == == == == =

This module defines a function ''say_my_name(first_name, last_name="").

Usage
== == =

''say_my_name(...)'' prints "My name is <first_name> <last_name>".

:

    >> > say_my_name = __import__('3-say_my_name').say_my_name
    >> > say_my_name("Brennan", "Boieng")
    My name is Brennan Boeing.

:

    >> > say_my_name("Marcus Garvey". "II")
    My name is Marcus Garvey II

The parameter '''last_name''' is optional, and if not provided, an empty
string is printed instead.

:

    >> > say_my_name("Codenerd1")
    My name is Codenerd1

Invalid Names
== == == == == == =

Both the ''first_name'' and ''last_name'' must be strings, otherwise, a
TypeError is raised.

:

    >> > say_my_name(1, "codenerd")
    Traceback(most recent call last):
        TypeError: first_name must be a string

:

    >> > say_my_name("codenerd", ["the", "beast"])
    Traceback(most recent call last):
        TypeError: last_name must be a string

:

    >> > say_my_name(["Nicki": 3, "Halley": 2], 6)
    Traceback(most recent call last):
        TypeError: first_name must be a string

:

    >> > say_my_name(None)
    Traceback(most recent call last):
        TypeError: first_name must be a string

At least one name must be provided

:

    >> > say_my_name()
    Traceback(most recent call last):
        TypeError: say_my_name() missing positional argument required
'first_name', 'last_name'
