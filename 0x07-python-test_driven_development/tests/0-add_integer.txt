===========================
How to use 0_add_integer.py
===========================

This module defines an integer addition function '''add_integer(a, b=98)'''

Usage
=====
'''add_integer(...)''' returns the addition of two arguments. For numbers,
that value is equal to using the ''+'' operator.

:

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

:

	>>> add_integer(2, -3)
	-1

The function also returns floating-point values.

:

	>>> add_integer(2.0, 3.0)
	5
Notably, floats are casted to ints before they are added.

:

	>>> add_integer(2.9, 0.2)
	2

:

	>>> add_integer(-2.9, -0.2)
	-2

Floating and non-floating values can be integrated 

:

	>>> add integer(2.5, -3)
	-1

The second argument is 98 by default and optional.

:

	>>> add_integer(2)
	100

Non-Numbers
===========

''add_integer()'' expects that arguments are either integers or floats.
If either argument is a non-integer or non-float, a TypeError is raised:

:

	>>> add_integer("hello", 3)
===========
''add_integer()'' expects that arguments are either integers or floats.
If either argument is a non-integer or non-float, a TypeError is raised:

:

	>>> add_integer("hi", 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

:

	>>> add_integer("hi", 7)
        Traceback (most recent call last):
        TypeError: a must be an integer

:

	>>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

:

	>>> add_integer(2.3, None)
        Traceback (most recent call last):
        TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

:

	>>> add_integer("hi", "mike")
        Traceback (most recent call last):
        TypeError: a must be an integer

The function will fail if infinity is provided.

:

	>>> add_integer(2, float('inf'))
        Traceback (most recent call last):
        OverFloatError: cannot convert float infinity to integer

:

	>>> add_integer(float('inf'))
        Traceback (most recent call last):
        OverFloatError: cannot convert float infinity to integer

And again with nan numbers.

:

	>>> add_integer(float('nan'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer

:

	>>> add_integer(float('nan'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
