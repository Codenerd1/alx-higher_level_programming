==============================
How to use 2-matrix_divided.py
==============================

This module defines a matrix division function ''matrix_divided(matrix, div)'''.

Usage
=====

''matrix_divided(...)'' returns a new matrix that is a copy of the parameter.
''matrix'' with all elements divided by ''div''.

:

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...	[2, 7, 3],
	...	[13, 15, 9]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[1.6, 3.1, 9.0], [6.2, 4.0, 2.0]]

Quotents are rounded off to 2 decimal places.

:

	>>> matrix = [
	...	[3, 6, 2],
	...	[6, 1, 9]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[1.6, 3.1, 9.0], [6.2, 4.0, 2.0]]

Original matrix remains unchanged.

:

	>>> print(matrix)
	[[1.6, 3.1, 9.0], [6.2, 4.0, 2.0]]

The function can also divide floating-point data types.

:

	>>> matrix = [
        ...     [3.4, 6.3, 2.0],
        ...     [6.6, 1.3, 9.6]
        ... ]
        >>> print(matrix_divided(matrix, 3))
        [[1.6, 3.1, 9.0], [6.2, 4.0, 2.0]]

Function can divide both integers and floats integrated.

:

	 >>> matrix = [
        ...     [7, 3.4, 6.3, 2.0],
        ...     [6.6, 1.3, 9.6, 6]
        ... ]
        >>> print(matrix_divided(matrix, 3))
        [[1.6, 3.1, 9.8, 10], [13, 6.2, 4.0, 2.0]]

Invalid Matrices
================

The perimeter ''matrix'' must be a list of lists containing either integers or
floats. If ''matrix'' is not a list, a TypeError is raised.

:

	>>> matrix = "not a list"
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats.

:
	>>> matrix = None
        >>> print(matrix_divided(matrix, 3))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix(list of lists) of
integers/floats.

Empty lists will raise TypeError.

:

	>>> matrix = []
        >>> print(matrix_divided(matrix, 3))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix(list of lists) of
integers/floats.

However, an empty list of lists will succeed.

:

	>>> matrix = [[]]
        >>> print(matrix_divided(matrix, 3))
        Traceback (most recent call last):
        [[]]

A similar TypeError is raised if the 'matrix' is not specifically a list of
lists.

:

	>>> matrix = [
	...	[3, 2, 9].
	...	[6, "not an integer", 7]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a (list of lists) of integers/floats.

Finally, all the rows in the ''matrix'' must be the same size.If any row is of
different sizes, a TypeError is raised.

:

	>>> matrix = [
        ...     [3, 2, 9, 8].
        ...     [6, 4, 7]
        ... ]
        >>> print(matrix_divided(matrix, 3))
        Traceback (most recent call last):
        TypeError: Each row of the matrix must have the same size.

Invalid Divisors
================

The parameter ''div'' must either be a float or integer, ohterwiese, a
TypeError is raised.

:

	>>> matrix = [
        ...     [3, 2, 9].
        ...     [6, 4, 7]
        ... ]
        >>> print(matrix_divided(matrix, "not a number"))
        Traceback (most recent call last):
        TypeError: div must be either an integer or float.

:

	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
        TypeError: div must be either an integer or float.

''div'' must also be a non-zero, otherwise, a ZeroDivisionError is raised.

:

	>>> print(matrix_divided(matrix, 0))
        Traceback (most recent call last):
        ZeroDivisionError: the 'matrix' cannot be divided by zero.
	
